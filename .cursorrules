{
  "projectName": "tuiter-social-media-app",
  "description": "A Twitter clone full-stack social media application",
  "architecture": {
    "frontend": {
      "type": "React SPA",
      "directory": "tuiter-react-web-app-main",
      "mainTechnologies": {
        "framework": "React.js",
        "routing": "React Router",
        "stateManagement": "Redux/Context API",
        "ui": "Material-UI/Bootstrap",
        "networking": "Axios",
        "testing": "Jest + React Testing Library",
        "bundler": "Webpack (CRA)"
      }
    },
    "backend": {
      "type": "RESTful API",
      "directory": "tuiter-node-server-app-main",
      "mainTechnologies": {
        "runtime": "Node.js",
        "framework": "Express.js",
        "database": "MongoDB",
        "orm": "Mongoose",
        "authentication": "JWT",
        "realtime": "Socket.io"
      }
    }
  },
  "features": {
    "auth": ["User registration", "Login", "JWT authentication"],
    "social": [
      "Create/Edit/Delete tweets",
      "Follow/Unfollow users",
      "Like/Unlike tweets",
      "Retweet functionality"
    ],
    "profile": ["View/Edit profile", "Profile picture upload"],
    "realtime": ["Notifications", "Live updates"]
  },
  "environment": {
    "database": {
      "type": "MongoDB",
      "version": "5.0",
      "connection": "mongodb+srv://CS6510:CS6510@cluster0.zpnb3.mongodb.net/tuiter?retryWrites=true&w=majority&appName=Cluster0",
      "collections": ["users", "tweets", "follows", "likes"]
    },
    "setup": {
      "mongodb": {
        "install": "brew tap mongodb/brew && brew install mongodb-community@5.0",
        "start": "brew services start mongodb/brew/mongodb-community@5.0",
        "path": "export PATH=\"/opt/homebrew/opt/mongodb-community@5.0/bin:$PATH\""
      }
    }
  },
  "installation": {
    "backend": {
      "directory": "cd tuiter-node-server-app-main",
      "dependencies": [
        "npm install express mongoose jsonwebtoken",
        "npm install socket.io cors dotenv",
        "npm install --save-dev nodemon"
      ],
      "devDependencies": [
        "npm install --save-dev jest supertest",
        "npm install --save-dev eslint prettier"
      ],
      "start": "npm start or nodemon"
    },
    "frontend": {
      "directory": "cd tuiter-react-web-app-main",
      "dependencies": [
        "npm install react-router-dom @reduxjs/toolkit",
        "npm install @material-ui/core @material-ui/icons",
        "npm install axios socket.io-client",
        "npm install --save-dev eslint-config-react-app",
        "npm install --save-dev @testing-library/react"
      ],
      "start": "npm start"
    }
  },
  "scripts": {
    "backend": {
      "start": "node server.js",
      "dev": "nodemon server.js",
      "test": "jest --watchAll",
      "lint": "eslint ."
    },
    "frontend": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    }
  },
  "structure": {
    "backend": {
      "controllers": "Business logic",
      "models": "Database schemas",
      "routes": "API endpoints",
      "middleware": "Auth and validation",
      "config": "Configuration files",
      "utils": "Helper functions"
    },
    "frontend": {
      "components": "React components",
      "services": "API calls",
      "redux": "State management",
      "hooks": "Custom hooks",
      "utils": "Helper functions",
      "styles": "CSS/SCSS files"
    }
  },
  "troubleshooting": {
    "mongodb": {
      "socketError": "sudo rm -f /tmp/mongodb-27017.sock",
      "permissionError": "sudo chown -R $(whoami) /opt/homebrew/var/mongodb /opt/homebrew/var/log/mongodb"
    },
    "eslint": {
      "reactAppConfig": {
        "fix": "rm -rf node_modules package-lock.json && npm install"
      }
    }
  },
  "ports": {
    "frontend": 3000,
    "backend": 4000,
    "mongodb": 27017,
    "socketio": 4001
  },
  "development": {
    "tools": {
      "versionControl": "Git",
      "packageManager": "npm/yarn",
      "codeQuality": ["ESLint", "Prettier"],
      "testing": ["Jest", "React Testing Library", "Supertest"]
    },
    "conventions": {
      "git": {
        "branches": ["main", "develop", "feature/*", "bugfix/*"],
        "commitMessage": "feat/fix/docs/style/refactor: message"
      },
      "code": {
        "style": "Airbnb JavaScript Style Guide",
        "documentation": "JSDoc comments"
      }
    }
  }
}
